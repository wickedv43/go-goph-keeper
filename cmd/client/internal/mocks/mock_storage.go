// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/client/internal/kv/interface.go
//
// Generated by this command:
//
//	mockgen -source=cmd/client/internal/kv/interface.go -destination=cmd/client/internal/mocks/mock_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	kv "github.com/wickedv43/go-goph-keeper/cmd/client/internal/kv"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockStorage) GetConfig() (kv.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(kv.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockStorageMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockStorage)(nil).GetConfig))
}

// GetCurrentKey mocks base method.
func (m *MockStorage) GetCurrentKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentKey indicates an expected call of GetCurrentKey.
func (mr *MockStorageMockRecorder) GetCurrentKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentKey", reflect.TypeOf((*MockStorage)(nil).GetCurrentKey))
}

// GetCurrentToken mocks base method.
func (m *MockStorage) GetCurrentToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentToken indicates an expected call of GetCurrentToken.
func (mr *MockStorageMockRecorder) GetCurrentToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentToken", reflect.TypeOf((*MockStorage)(nil).GetCurrentToken))
}

// SaveContext mocks base method.
func (m *MockStorage) SaveContext(login, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContext", login, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContext indicates an expected call of SaveContext.
func (mr *MockStorageMockRecorder) SaveContext(login, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContext", reflect.TypeOf((*MockStorage)(nil).SaveContext), login, token)
}

// SaveKey mocks base method.
func (m *MockStorage) SaveKey(login, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveKey", login, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveKey indicates an expected call of SaveKey.
func (mr *MockStorageMockRecorder) SaveKey(login, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveKey", reflect.TypeOf((*MockStorage)(nil).SaveKey), login, key)
}

// SetConfig mocks base method.
func (m *MockStorage) SetConfig(cfg kv.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfig", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfig indicates an expected call of SetConfig.
func (mr *MockStorageMockRecorder) SetConfig(cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfig", reflect.TypeOf((*MockStorage)(nil).SetConfig), cfg)
}

// UseContext mocks base method.
func (m *MockStorage) UseContext(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseContext", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseContext indicates an expected call of UseContext.
func (mr *MockStorageMockRecorder) UseContext(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseContext", reflect.TypeOf((*MockStorage)(nil).UseContext), name)
}
