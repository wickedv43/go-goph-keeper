package main

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"syscall"

	"github.com/spf13/cobra"
	"github.com/sqweek/dialog"
	"github.com/wickedv43/go-goph-keeper/cmd/client/kv"

	pb "github.com/wickedv43/go-goph-keeper/internal/api"
	"golang.org/x/term"
)

func (g *GophKeeper) LoginCMD() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "login",
		Short: "–í—Ö–æ–¥ –≤ GophKeeper",
		RunE: func(cmd *cobra.Command, args []string) error {
			fmt.Print("üîê Login: ")
			var login string
			if _, err := fmt.Scanln(&login); err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞: %w", err)
			}

			fmt.Print("üîê Password: ")
			passBytes, err := term.ReadPassword(int(syscall.Stdin))
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: %w", err)
			}
			fmt.Println()

			password := string(passBytes)

			if err = g.Login(login, password); err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: %w", err)
			}

			return g.shellLoop()
		},
	}

	return cmd
}

func (g *GophKeeper) RegisterCMD() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "register",
		Short: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ GophKeeper",
		RunE: func(cmd *cobra.Command, args []string) error {
			fmt.Print("üîê Login: ")
			var login string
			if _, err := fmt.Scanln(&login); err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞: %w", err)
			}

			fmt.Print("üîê Password: ")
			passBytes, err := term.ReadPassword(int(syscall.Stdin))
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: %w", err)
			}
			fmt.Println()

			login = strings.TrimSpace(login)
			password := string(passBytes)

			if err = g.Register(login, password); err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %w", err)
			}

			return g.shellLoop()
		},
	}

	return cmd
}

func (g *GophKeeper) NewVaultCMD() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "create",
		Short: "create new record in GophKeeper",
		RunE: func(cmd *cobra.Command, args []string) error {
			v := &pb.VaultRecord{}

			fmt.Print("Title: ")
			if _, err := fmt.Scanln(&v.Title); err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: %w", err)
			}

			fmt.Print("Types  \"login\", \"note\", \"card\" or \"binary\"  ")
			fmt.Print("Type: ")
			if _, err := fmt.Scanln(&v.Type); err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞: %w", err)
			}

			switch v.Type {
			case "login":
				var err error

				v, err = vaultLoginPass(v)
				if err != nil {
					return err
				}
			case "note":
				var err error

				v, err = vaultNote(v)
				if err != nil {
					return err
				}
			case "card":
				var err error

				v, err = vaultCard(v)
				if err != nil {
					return err
				}
			case "binary":
				var err error

				v, err = vaultBinary(v)
				if err != nil {
					return err
				}
			}

			//fmt.Println("Enter some tag: ")
			//if _, err := fmt.Scanln(&v.Metadata); err != nil {
			//	return err
			//}

			//TODO: input metadata)))
			v.Metadata = "{}"

			_, err := g.VaultCreate(v)
			if err != nil {
				return err
			}

			return g.shellLoop()
		},
	}

	return cmd
}

func vaultLoginPass(v *pb.VaultRecord) (*pb.VaultRecord, error) {
	var (
		d   kv.LoginPass
		err error
	)

	fmt.Print("Login: ")
	if _, err = fmt.Scanln(&d.Login); err != nil {
		return v, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: %w", err)
	}
	fmt.Print("Password: ")
	if _, err = fmt.Scanln(&d.Password); err != nil {
		return v, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: %w", err)
	}

	//TODO: CRYPTO???
	v.EncryptedData, err = json.Marshal(d)
	if err != nil {
		return v, err
	}

	return v, nil
}

func vaultNote(v *pb.VaultRecord) (*pb.VaultRecord, error) {
	var (
		d   kv.Note
		err error
	)

	fmt.Print("Note: ")
	if _, err = fmt.Scanln(&d.Text); err != nil {
		return v, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: %w", err)
	}

	//TODO: CRYPTO???
	v.EncryptedData, err = json.Marshal(d)
	if err != nil {
		return v, err
	}

	return v, nil
}

func vaultCard(v *pb.VaultRecord) (*pb.VaultRecord, error) {
	var (
		d   kv.Card
		err error
	)

	fmt.Print("Number: ")
	if _, err = fmt.Scanln(&d.Number); err != nil {
		return v, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: %w", err)
	}

	fmt.Print("Date: ")
	if _, err = fmt.Scanln(&d.Date); err != nil {
		return v, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: %w", err)
	}

	fmt.Print("CVV: ")
	if _, err = fmt.Scanln(&d.CVV); err != nil {
		return v, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: %w", err)
	}

	//TODO: CRYPTO???
	v.EncryptedData, err = json.Marshal(d)
	if err != nil {
		return v, err
	}

	return v, nil
}

func vaultBinary(v *pb.VaultRecord) (*pb.VaultRecord, error) {
	path, err := dialog.File().Title("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª").Load()
	if err != nil {
		return v, err
	}

	data, err := os.ReadFile(path)
	if err != nil {
		return v, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: %w", err)
	}

	// üîê TODO: encrypt(data) –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	v.EncryptedData = data

	// –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ –≤ metadata
	meta := map[string]string{"filename": filepath.Base(path)}
	metaJSON, _ := json.Marshal(meta)
	v.Metadata = string(metaJSON)

	return v, nil
}

func (g *GophKeeper) VaultListCMD() *cobra.Command {
	return &cobra.Command{
		Use:   "vault list",
		Short: "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
		RunE: func(cmd *cobra.Command, args []string) error {
			resp, err := g.VaultList()
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: %w", err)
			}

			if len(resp.Vaults) == 0 {
				fmt.Println("üîí –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø—É—Å—Ç–æ.")
				return g.shellLoop()
			}

			for _, v := range resp.Vaults {
				fmt.Printf("üìÑ [%s] %s (ID: %d)\n", v.Type, v.Title, v.Id)
			}

			return g.shellLoop()
		},
	}
}

func (g *GophKeeper) VaultShowCMD(id uint64) error {
	v, err := g.VaultGet(id)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å: %w", err)
	}

	fmt.Printf("üìÑ ID: %d\n", v.Id)
	fmt.Printf("üìå Type: %s\n", v.Type)
	fmt.Printf("üìù Title: %s\n", v.Title)

	switch v.Type {
	case "login":
		var d kv.LoginPass
		if err := json.Unmarshal(v.EncryptedData, &d); err != nil {
			fmt.Println("üîê –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞:", err)
		} else {
			fmt.Printf("üë§ Login: %s\n", d.Login)
			fmt.Printf("üîë Password: %s\n", d.Password)
		}

	case "note":
		var d kv.Note
		if err := json.Unmarshal(v.EncryptedData, &d); err != nil {
			fmt.Println("üìù –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:", err)
		} else {
			fmt.Printf("üìù Note: %s\n", d.Text)
		}

	case "card":
		var d kv.Card
		if err := json.Unmarshal(v.EncryptedData, &d); err != nil {
			fmt.Println("üí≥ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞—Ä—Ç—ã:", err)
		} else {
			fmt.Printf("üí≥ Number: %s\n", d.Number)
			fmt.Printf("üìÜ Date: %s\n", d.Date)
			fmt.Printf("üîí CVV: %s\n", d.CVV)
		}

	case "binary":
		var meta map[string]string
		filename := "file.bin"

		if err = json.Unmarshal([]byte(v.Metadata), &meta); err == nil {
			filename = meta["filename"]
			fmt.Printf("üìé File: %s (%d –±–∞–π—Ç)\n", filename, len(v.EncryptedData))
		} else {
			fmt.Printf("üìé Binary file (%d –±–∞–π—Ç)\n", len(v.EncryptedData))
		}

		// üëâ –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		fmt.Print("üíæ –•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª? (y/n): ")
		var answer string
		fmt.Scanln(&answer)
		if strings.ToLower(answer) != "y" {
			break
		}

		// üëâ –í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		savePath, err := dialog.File().Title("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫...").Save()
		if err != nil {
			fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø—É—Ç—å:", err)
			break
		}

		err = os.WriteFile(savePath, v.EncryptedData, 0644)
		if err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err)
		} else {
			fmt.Println("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤", savePath)
		}

	default:
		fmt.Println("ü§∑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö")
	}

	return nil
}

func (g *GophKeeper) VaultDeleteCMD() *cobra.Command {
	return &cobra.Command{
		Use:   "delete [id]",
		Short: "–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID",
		Args:  cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			id, err := strconv.ParseUint(args[0], 10, 64)
			if err != nil {
				return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π ID: %w", err)
			}
			_, err = g.VaultDelete(id)
			if err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %w", err)
			}
			fmt.Println("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
			return g.shellLoop()
		},
	}
}
