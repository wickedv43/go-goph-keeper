package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"github.com/spf13/cobra"
)

func (g *GophKeeper) ShellCMD() *cobra.Command {
	return &cobra.Command{
		Use:   "shell",
		Short: "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –æ–±–æ–ª–æ—á–∫–∞ GophKeeper",
		RunE: g.withAuth(func(cmd *cobra.Command, args []string) error {
			g.printBanner() // banner)))
			fmt.Print("\nüíª type `exit` to quit\n")
			return g.shellLoop()
		}),
	}
}

func (g *GophKeeper) shellLoop() error {
	reader := bufio.NewScanner(os.Stdin)

	cfg, _ := g.storage.GetConfig()
	currentCtx := cfg.Current

	for {
		fmt.Printf("[%s] > ", currentCtx)
		if !reader.Scan() {
			break
		}
		line := strings.TrimSpace(reader.Text())
		args := strings.Split(line, " ")

		switch args[0] {
		case "exit", "quit", "q":
			os.Exit(0)
			return nil

		case "list":
			if err := g.VaultListCMD().RunE(g.rootCmd, nil); err != nil {
				fmt.Println("‚ùå", err)
			}

		case "create":
			if err := g.NewVaultCMD().RunE(g.rootCmd, nil); err != nil {
				fmt.Println("‚ùå", err)
			}

		case "get":
			if len(args) < 2 {
				fmt.Println("‚ùå –ü—Ä–∏–º–µ—Ä: show <id>")
				continue
			}

			if err := g.VaultShowCMD().RunE(g.rootCmd, args); err != nil {
				fmt.Println("‚ùå", err)
			}

		case "delete":
			if len(args) < 2 {
				fmt.Println("‚ùå –ü—Ä–∏–º–µ—Ä: delete <id>")
				continue
			}

			if err := g.VaultDeleteCMD().RunE(g.rootCmd, args); err != nil {
				fmt.Println("‚ùå", err)
			}
		case "contexts":
			if err := g.ContextListCMD().RunE(g.rootCmd, nil); err != nil {
				fmt.Println("‚ùå", err)
			}

		case "use":
			if len(args) < 2 {
				fmt.Println("‚ùå –ü—Ä–∏–º–µ—Ä: use <name>")
				continue
			}
			if err := g.ContextUseCMD().RunE(g.rootCmd, args); err != nil {
				fmt.Println("‚ùå", err)
			}
		case "login":
			if err := g.LoginCMD().RunE(g.rootCmd, nil); err != nil {
				fmt.Println("‚ùå", err)
			}

		case "register":
			if err := g.RegisterCMD().RunE(g.rootCmd, nil); err != nil {
				fmt.Println("‚ùå", err)
			}
		case "me":
			c, _ := g.storage.GetConfig()
			token, _ := g.storage.GetCurrentToken()
			key, _ := g.storage.GetCurrentKey()
			fmt.Println(c.Current)
			fmt.Println(token, key)

		case "help", "?":
			printHelp()
		default:
			fmt.Println("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ `help`")
		}
	}

	return reader.Err()
}

func printHelp() {
	fmt.Println(`üîß –ö–æ–º–∞–Ω–¥—ã:
  login            –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
  contexts         —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
  use <name>       —Å–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
  list            –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
  get <id>        –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID
  delete <id>      —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID
  create           —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
  logout           –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  exit             –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã`)
}
