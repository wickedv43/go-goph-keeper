// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/interface.go -destination=internal/mocks/mock_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/wickedv43/go-goph-keeper/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockDataKeeper is a mock of DataKeeper interface.
type MockDataKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockDataKeeperMockRecorder
	isgomock struct{}
}

// MockDataKeeperMockRecorder is the mock recorder for MockDataKeeper.
type MockDataKeeperMockRecorder struct {
	mock *MockDataKeeper
}

// NewMockDataKeeper creates a new mock instance.
func NewMockDataKeeper(ctrl *gomock.Controller) *MockDataKeeper {
	mock := &MockDataKeeper{ctrl: ctrl}
	mock.recorder = &MockDataKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataKeeper) EXPECT() *MockDataKeeperMockRecorder {
	return m.recorder
}

// CreateVault mocks base method.
func (m *MockDataKeeper) CreateVault(ctx context.Context, v *storage.VaultRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVault", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVault indicates an expected call of CreateVault.
func (mr *MockDataKeeperMockRecorder) CreateVault(ctx, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVault", reflect.TypeOf((*MockDataKeeper)(nil).CreateVault), ctx, v)
}

// DeleteVault mocks base method.
func (m *MockDataKeeper) DeleteVault(ctx context.Context, vID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVault", ctx, vID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVault indicates an expected call of DeleteVault.
func (mr *MockDataKeeperMockRecorder) DeleteVault(ctx, vID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVault", reflect.TypeOf((*MockDataKeeper)(nil).DeleteVault), ctx, vID)
}

// GetVault mocks base method.
func (m *MockDataKeeper) GetVault(ctx context.Context, vID uint64) (storage.VaultRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVault", ctx, vID)
	ret0, _ := ret[0].(storage.VaultRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVault indicates an expected call of GetVault.
func (mr *MockDataKeeperMockRecorder) GetVault(ctx, vID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVault", reflect.TypeOf((*MockDataKeeper)(nil).GetVault), ctx, vID)
}

// ListVaults mocks base method.
func (m *MockDataKeeper) ListVaults(ctx context.Context, uID uint64) ([]storage.VaultRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVaults", ctx, uID)
	ret0, _ := ret[0].([]storage.VaultRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVaults indicates an expected call of ListVaults.
func (mr *MockDataKeeperMockRecorder) ListVaults(ctx, uID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVaults", reflect.TypeOf((*MockDataKeeper)(nil).ListVaults), ctx, uID)
}

// NewUser mocks base method.
func (m *MockDataKeeper) NewUser(ctx context.Context, u *storage.User) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", ctx, u)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser.
func (mr *MockDataKeeperMockRecorder) NewUser(ctx, u any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockDataKeeper)(nil).NewUser), ctx, u)
}

// Shutdown mocks base method.
func (m *MockDataKeeper) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockDataKeeperMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockDataKeeper)(nil).Shutdown))
}

// UpdateVault mocks base method.
func (m *MockDataKeeper) UpdateVault(ctx context.Context, v *storage.VaultRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVault", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVault indicates an expected call of UpdateVault.
func (mr *MockDataKeeperMockRecorder) UpdateVault(ctx, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVault", reflect.TypeOf((*MockDataKeeper)(nil).UpdateVault), ctx, v)
}

// User mocks base method.
func (m *MockDataKeeper) User(ctx context.Context, uID uint64) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", ctx, uID)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockDataKeeperMockRecorder) User(ctx, uID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockDataKeeper)(nil).User), ctx, uID)
}

// UserByLogin mocks base method.
func (m *MockDataKeeper) UserByLogin(ctx context.Context, login string) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByLogin", ctx, login)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByLogin indicates an expected call of UserByLogin.
func (mr *MockDataKeeperMockRecorder) UserByLogin(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByLogin", reflect.TypeOf((*MockDataKeeper)(nil).UserByLogin), ctx, login)
}
